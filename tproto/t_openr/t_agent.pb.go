// Code generated by protoc-gen-go. DO NOT EDIT.
// source: t_agent.proto

package t_openr

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AgentVersion int32

const (
	AgentVersion_T_AGENT_VER_UNUSED AgentVersion = 0
	AgentVersion_T_AGENT_VER_MAJOR  AgentVersion = 1
	AgentVersion_T_AGENT_VER_MINOR  AgentVersion = 0
)

var AgentVersion_name = map[int32]string{
	0: "T_AGENT_VER_UNUSED",
	1: "T_AGENT_VER_MAJOR",
	// Duplicate value: 0: "T_AGENT_VER_MINOR",
}
var AgentVersion_value = map[string]int32{
	"T_AGENT_VER_UNUSED": 0,
	"T_AGENT_VER_MAJOR":  1,
	"T_AGENT_VER_MINOR":  0,
}

func (x AgentVersion) String() string {
	return proto.EnumName(AgentVersion_name, int32(x))
}
func (AgentVersion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_t_agent_45d5e7424f62967b, []int{0}
}

// Packet rule action level
type TActionLevel int32

const (
	// Reserved
	TActionLevel_T_ACTION_RESERVED TActionLevel = 0
	// Global level action
	TActionLevel_T_ACTION_GLOBAL TActionLevel = 1
	// Interface level action
	TActionLevel_T_ACTION_INTERFACE TActionLevel = 2
)

var TActionLevel_name = map[int32]string{
	0: "T_ACTION_RESERVED",
	1: "T_ACTION_GLOBAL",
	2: "T_ACTION_INTERFACE",
}
var TActionLevel_value = map[string]int32{
	"T_ACTION_RESERVED":  0,
	"T_ACTION_GLOBAL":    1,
	"T_ACTION_INTERFACE": 2,
}

func (x TActionLevel) String() string {
	return proto.EnumName(TActionLevel_name, int32(x))
}
func (TActionLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_t_agent_45d5e7424f62967b, []int{1}
}

// device info type
type TDeviceInfoType int32

const (
	// Reserved
	TDeviceInfoType_T_DEV_INFO_RESERVED TDeviceInfoType = 0
	// vendor information
	TDeviceInfoType_T_DEV_INFO_VENDOR_NAME TDeviceInfoType = 1
)

var TDeviceInfoType_name = map[int32]string{
	0: "T_DEV_INFO_RESERVED",
	1: "T_DEV_INFO_VENDOR_NAME",
}
var TDeviceInfoType_value = map[string]int32{
	"T_DEV_INFO_RESERVED":    0,
	"T_DEV_INFO_VENDOR_NAME": 1,
}

func (x TDeviceInfoType) String() string {
	return proto.EnumName(TDeviceInfoType_name, int32(x))
}
func (TDeviceInfoType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_t_agent_45d5e7424f62967b, []int{2}
}

// open/r packet rule
type TPacketRule struct {
	// for global or interface level enable
	EnLevel TActionLevel `protobuf:"varint,1,opt,name=enLevel,proto3,enum=t_openr.TActionLevel" json:"enLevel,omitempty"`
	// interface name only for interface action level
	IfName string `protobuf:"bytes,2,opt,name=ifName,proto3" json:"ifName,omitempty"`
	// packet destination(FF02::1 or FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)
	DstAddress *TAddress `protobuf:"bytes,3,opt,name=dstAddress,proto3" json:"dstAddress,omitempty"`
	// protocol type (tcp : 6; udp : 17)
	ProtoType uint32 `protobuf:"varint,4,opt,name=protoType,proto3" json:"protoType,omitempty"`
	// packet dest-port(tcp: 60001~60012; udp: 6666)
	DstPort uint32 `protobuf:"varint,5,opt,name=dstPort,proto3" json:"dstPort,omitempty"`
	// true: enable(false: disable) the rule
	EnableRule           bool     `protobuf:"varint,6,opt,name=enableRule,proto3" json:"enableRule,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TPacketRule) Reset()         { *m = TPacketRule{} }
func (m *TPacketRule) String() string { return proto.CompactTextString(m) }
func (*TPacketRule) ProtoMessage()    {}
func (*TPacketRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_t_agent_45d5e7424f62967b, []int{0}
}
func (m *TPacketRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TPacketRule.Unmarshal(m, b)
}
func (m *TPacketRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TPacketRule.Marshal(b, m, deterministic)
}
func (dst *TPacketRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TPacketRule.Merge(dst, src)
}
func (m *TPacketRule) XXX_Size() int {
	return xxx_messageInfo_TPacketRule.Size(m)
}
func (m *TPacketRule) XXX_DiscardUnknown() {
	xxx_messageInfo_TPacketRule.DiscardUnknown(m)
}

var xxx_messageInfo_TPacketRule proto.InternalMessageInfo

func (m *TPacketRule) GetEnLevel() TActionLevel {
	if m != nil {
		return m.EnLevel
	}
	return TActionLevel_T_ACTION_RESERVED
}

func (m *TPacketRule) GetIfName() string {
	if m != nil {
		return m.IfName
	}
	return ""
}

func (m *TPacketRule) GetDstAddress() *TAddress {
	if m != nil {
		return m.DstAddress
	}
	return nil
}

func (m *TPacketRule) GetProtoType() uint32 {
	if m != nil {
		return m.ProtoType
	}
	return 0
}

func (m *TPacketRule) GetDstPort() uint32 {
	if m != nil {
		return m.DstPort
	}
	return 0
}

func (m *TPacketRule) GetEnableRule() bool {
	if m != nil {
		return m.EnableRule
	}
	return false
}

// device info response message
type TDeviceInfoReq struct {
	// device info type
	EnDevInfoType        TDeviceInfoType `protobuf:"varint,1,opt,name=enDevInfoType,proto3,enum=t_openr.TDeviceInfoType" json:"enDevInfoType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TDeviceInfoReq) Reset()         { *m = TDeviceInfoReq{} }
func (m *TDeviceInfoReq) String() string { return proto.CompactTextString(m) }
func (*TDeviceInfoReq) ProtoMessage()    {}
func (*TDeviceInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_t_agent_45d5e7424f62967b, []int{1}
}
func (m *TDeviceInfoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TDeviceInfoReq.Unmarshal(m, b)
}
func (m *TDeviceInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TDeviceInfoReq.Marshal(b, m, deterministic)
}
func (dst *TDeviceInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TDeviceInfoReq.Merge(dst, src)
}
func (m *TDeviceInfoReq) XXX_Size() int {
	return xxx_messageInfo_TDeviceInfoReq.Size(m)
}
func (m *TDeviceInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TDeviceInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_TDeviceInfoReq proto.InternalMessageInfo

func (m *TDeviceInfoReq) GetEnDevInfoType() TDeviceInfoType {
	if m != nil {
		return m.EnDevInfoType
	}
	return TDeviceInfoType_T_DEV_INFO_RESERVED
}

// device info response message
type TDeviceInfoRsp struct {
	// device info type
	EnDevInfoType TDeviceInfoType `protobuf:"varint,1,opt,name=enDevInfoType,proto3,enum=t_openr.TDeviceInfoType" json:"enDevInfoType,omitempty"`
	// Types that are valid to be assigned to OneDeviceInfo:
	//	*TDeviceInfoRsp_VendorName
	OneDeviceInfo        isTDeviceInfoRsp_OneDeviceInfo `protobuf_oneof:"oneDeviceInfo"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *TDeviceInfoRsp) Reset()         { *m = TDeviceInfoRsp{} }
func (m *TDeviceInfoRsp) String() string { return proto.CompactTextString(m) }
func (*TDeviceInfoRsp) ProtoMessage()    {}
func (*TDeviceInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_t_agent_45d5e7424f62967b, []int{2}
}
func (m *TDeviceInfoRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TDeviceInfoRsp.Unmarshal(m, b)
}
func (m *TDeviceInfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TDeviceInfoRsp.Marshal(b, m, deterministic)
}
func (dst *TDeviceInfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TDeviceInfoRsp.Merge(dst, src)
}
func (m *TDeviceInfoRsp) XXX_Size() int {
	return xxx_messageInfo_TDeviceInfoRsp.Size(m)
}
func (m *TDeviceInfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_TDeviceInfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_TDeviceInfoRsp proto.InternalMessageInfo

func (m *TDeviceInfoRsp) GetEnDevInfoType() TDeviceInfoType {
	if m != nil {
		return m.EnDevInfoType
	}
	return TDeviceInfoType_T_DEV_INFO_RESERVED
}

type isTDeviceInfoRsp_OneDeviceInfo interface {
	isTDeviceInfoRsp_OneDeviceInfo()
}

type TDeviceInfoRsp_VendorName struct {
	VendorName string `protobuf:"bytes,2,opt,name=VendorName,proto3,oneof"`
}

func (*TDeviceInfoRsp_VendorName) isTDeviceInfoRsp_OneDeviceInfo() {}

func (m *TDeviceInfoRsp) GetOneDeviceInfo() isTDeviceInfoRsp_OneDeviceInfo {
	if m != nil {
		return m.OneDeviceInfo
	}
	return nil
}

func (m *TDeviceInfoRsp) GetVendorName() string {
	if x, ok := m.GetOneDeviceInfo().(*TDeviceInfoRsp_VendorName); ok {
		return x.VendorName
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TDeviceInfoRsp) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TDeviceInfoRsp_OneofMarshaler, _TDeviceInfoRsp_OneofUnmarshaler, _TDeviceInfoRsp_OneofSizer, []interface{}{
		(*TDeviceInfoRsp_VendorName)(nil),
	}
}

func _TDeviceInfoRsp_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TDeviceInfoRsp)
	// oneDeviceInfo
	switch x := m.OneDeviceInfo.(type) {
	case *TDeviceInfoRsp_VendorName:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.VendorName)
	case nil:
	default:
		return fmt.Errorf("TDeviceInfoRsp.OneDeviceInfo has unexpected type %T", x)
	}
	return nil
}

func _TDeviceInfoRsp_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TDeviceInfoRsp)
	switch tag {
	case 2: // oneDeviceInfo.VendorName
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.OneDeviceInfo = &TDeviceInfoRsp_VendorName{x}
		return true, err
	default:
		return false, nil
	}
}

func _TDeviceInfoRsp_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TDeviceInfoRsp)
	// oneDeviceInfo
	switch x := m.OneDeviceInfo.(type) {
	case *TDeviceInfoRsp_VendorName:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.VendorName)))
		n += len(x.VendorName)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// open/r unicast route path attribute
type TRoutePath struct {
	// Route's local outgoing interface
	LocalIfName string `protobuf:"bytes,1,opt,name=localIfName,proto3" json:"localIfName,omitempty"`
	// Route's nexthop address(ipv4 or ipv6)
	NexthopAddress *TAddress `protobuf:"bytes,2,opt,name=nexthopAddress,proto3" json:"nexthopAddress,omitempty"`
	// Route's cost, Reserved field. Always 0.
	Cost                 uint32   `protobuf:"varint,3,opt,name=cost,proto3" json:"cost,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TRoutePath) Reset()         { *m = TRoutePath{} }
func (m *TRoutePath) String() string { return proto.CompactTextString(m) }
func (*TRoutePath) ProtoMessage()    {}
func (*TRoutePath) Descriptor() ([]byte, []int) {
	return fileDescriptor_t_agent_45d5e7424f62967b, []int{3}
}
func (m *TRoutePath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TRoutePath.Unmarshal(m, b)
}
func (m *TRoutePath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TRoutePath.Marshal(b, m, deterministic)
}
func (dst *TRoutePath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TRoutePath.Merge(dst, src)
}
func (m *TRoutePath) XXX_Size() int {
	return xxx_messageInfo_TRoutePath.Size(m)
}
func (m *TRoutePath) XXX_DiscardUnknown() {
	xxx_messageInfo_TRoutePath.DiscardUnknown(m)
}

var xxx_messageInfo_TRoutePath proto.InternalMessageInfo

func (m *TRoutePath) GetLocalIfName() string {
	if m != nil {
		return m.LocalIfName
	}
	return ""
}

func (m *TRoutePath) GetNexthopAddress() *TAddress {
	if m != nil {
		return m.NexthopAddress
	}
	return nil
}

func (m *TRoutePath) GetCost() uint32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

// open/r unicast route
type TUnicstRoute struct {
	// Route's destination prefix address(ipv4 or ipv6)
	PrefixAddress *TAddress `protobuf:"bytes,1,opt,name=prefixAddress,proto3" json:"prefixAddress,omitempty"`
	// Route's prefix length
	PrefixLen uint32 `protobuf:"varint,2,opt,name=prefixLen,proto3" json:"prefixLen,omitempty"`
	// Route's preference value used by RIB. Default value is 30
	Preference uint32 `protobuf:"varint,3,opt,name=preference,proto3" json:"preference,omitempty"`
	// route path attribute
	Path                 []*TRoutePath `protobuf:"bytes,4,rep,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TUnicstRoute) Reset()         { *m = TUnicstRoute{} }
func (m *TUnicstRoute) String() string { return proto.CompactTextString(m) }
func (*TUnicstRoute) ProtoMessage()    {}
func (*TUnicstRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_t_agent_45d5e7424f62967b, []int{4}
}
func (m *TUnicstRoute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TUnicstRoute.Unmarshal(m, b)
}
func (m *TUnicstRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TUnicstRoute.Marshal(b, m, deterministic)
}
func (dst *TUnicstRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TUnicstRoute.Merge(dst, src)
}
func (m *TUnicstRoute) XXX_Size() int {
	return xxx_messageInfo_TUnicstRoute.Size(m)
}
func (m *TUnicstRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_TUnicstRoute.DiscardUnknown(m)
}

var xxx_messageInfo_TUnicstRoute proto.InternalMessageInfo

func (m *TUnicstRoute) GetPrefixAddress() *TAddress {
	if m != nil {
		return m.PrefixAddress
	}
	return nil
}

func (m *TUnicstRoute) GetPrefixLen() uint32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

func (m *TUnicstRoute) GetPreference() uint32 {
	if m != nil {
		return m.Preference
	}
	return 0
}

func (m *TUnicstRoute) GetPath() []*TRoutePath {
	if m != nil {
		return m.Path
	}
	return nil
}

// open/r route message
type TRouteMsg struct {
	// Sequence of route. This can be used to indicate replies with requests.
	// The gRPC server simply reflects this field back in the reply.
	IndexOfRouteMsg uint64 `protobuf:"varint,1,opt,name=indexOfRouteMsg,proto3" json:"indexOfRouteMsg,omitempty"`
	// Route operation type (add delte or update)
	EnOperType TObjectOp `protobuf:"varint,2,opt,name=enOperType,proto3,enum=t_openr.TObjectOp" json:"enOperType,omitempty"`
	// VRF name, not supported now. Reserved field.
	VrfName string `protobuf:"bytes,3,opt,name=vrfName,proto3" json:"vrfName,omitempty"`
	// list of unicast route
	Route                []*TUnicstRoute `protobuf:"bytes,4,rep,name=route,proto3" json:"route,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TRouteMsg) Reset()         { *m = TRouteMsg{} }
func (m *TRouteMsg) String() string { return proto.CompactTextString(m) }
func (*TRouteMsg) ProtoMessage()    {}
func (*TRouteMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_t_agent_45d5e7424f62967b, []int{5}
}
func (m *TRouteMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TRouteMsg.Unmarshal(m, b)
}
func (m *TRouteMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TRouteMsg.Marshal(b, m, deterministic)
}
func (dst *TRouteMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TRouteMsg.Merge(dst, src)
}
func (m *TRouteMsg) XXX_Size() int {
	return xxx_messageInfo_TRouteMsg.Size(m)
}
func (m *TRouteMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TRouteMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TRouteMsg proto.InternalMessageInfo

func (m *TRouteMsg) GetIndexOfRouteMsg() uint64 {
	if m != nil {
		return m.IndexOfRouteMsg
	}
	return 0
}

func (m *TRouteMsg) GetEnOperType() TObjectOp {
	if m != nil {
		return m.EnOperType
	}
	return TObjectOp_OP_RESERVED_OBJ
}

func (m *TRouteMsg) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *TRouteMsg) GetRoute() []*TUnicstRoute {
	if m != nil {
		return m.Route
	}
	return nil
}

// open/r route response message
type TRouteMsgRsp struct {
	// Sequence of route. This can be used to indicate replies with requests.
	// The gRPC server simply reflects this field back in the reply.
	IndexOfRouteMsg uint64 `protobuf:"varint,1,opt,name=indexOfRouteMsg,proto3" json:"indexOfRouteMsg,omitempty"`
	// VRF name, not supported now. Reserved field.
	ErrorStatus          *TErrorStatus `protobuf:"bytes,2,opt,name=errorStatus,proto3" json:"errorStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TRouteMsgRsp) Reset()         { *m = TRouteMsgRsp{} }
func (m *TRouteMsgRsp) String() string { return proto.CompactTextString(m) }
func (*TRouteMsgRsp) ProtoMessage()    {}
func (*TRouteMsgRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_t_agent_45d5e7424f62967b, []int{6}
}
func (m *TRouteMsgRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TRouteMsgRsp.Unmarshal(m, b)
}
func (m *TRouteMsgRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TRouteMsgRsp.Marshal(b, m, deterministic)
}
func (dst *TRouteMsgRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TRouteMsgRsp.Merge(dst, src)
}
func (m *TRouteMsgRsp) XXX_Size() int {
	return xxx_messageInfo_TRouteMsgRsp.Size(m)
}
func (m *TRouteMsgRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_TRouteMsgRsp.DiscardUnknown(m)
}

var xxx_messageInfo_TRouteMsgRsp proto.InternalMessageInfo

func (m *TRouteMsgRsp) GetIndexOfRouteMsg() uint64 {
	if m != nil {
		return m.IndexOfRouteMsg
	}
	return 0
}

func (m *TRouteMsgRsp) GetErrorStatus() *TErrorStatus {
	if m != nil {
		return m.ErrorStatus
	}
	return nil
}

func init() {
	proto.RegisterType((*TPacketRule)(nil), "t_openr.TPacketRule")
	proto.RegisterType((*TDeviceInfoReq)(nil), "t_openr.TDeviceInfoReq")
	proto.RegisterType((*TDeviceInfoRsp)(nil), "t_openr.TDeviceInfoRsp")
	proto.RegisterType((*TRoutePath)(nil), "t_openr.TRoutePath")
	proto.RegisterType((*TUnicstRoute)(nil), "t_openr.TUnicstRoute")
	proto.RegisterType((*TRouteMsg)(nil), "t_openr.TRouteMsg")
	proto.RegisterType((*TRouteMsgRsp)(nil), "t_openr.TRouteMsgRsp")
	proto.RegisterEnum("t_openr.AgentVersion", AgentVersion_name, AgentVersion_value)
	proto.RegisterEnum("t_openr.TActionLevel", TActionLevel_name, TActionLevel_value)
	proto.RegisterEnum("t_openr.TDeviceInfoType", TDeviceInfoType_name, TDeviceInfoType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TAgentOperClient is the client API for TAgentOper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TAgentOperClient interface {
	// this is the first grpc call, used for version check, etc.
	SendInitMsg(ctx context.Context, in *TInitMsg, opts ...grpc.CallOption) (*TErrorStatus, error)
	// enable or disable to deliver openr packet to cpu
	EnableProtocolPacketToCPU(ctx context.Context, in *TPacketRule, opts ...grpc.CallOption) (*TErrorStatus, error)
	// get device info
	GetDeviceInfo(ctx context.Context, in *TDeviceInfoReq, opts ...grpc.CallOption) (*TDeviceInfoRsp, error)
	// sync openr routes to device
	SyncRoutes(ctx context.Context, opts ...grpc.CallOption) (TAgentOper_SyncRoutesClient, error)
}

type tAgentOperClient struct {
	cc *grpc.ClientConn
}

func NewTAgentOperClient(cc *grpc.ClientConn) TAgentOperClient {
	return &tAgentOperClient{cc}
}

func (c *tAgentOperClient) SendInitMsg(ctx context.Context, in *TInitMsg, opts ...grpc.CallOption) (*TErrorStatus, error) {
	out := new(TErrorStatus)
	err := c.cc.Invoke(ctx, "/t_openr.TAgentOper/sendInitMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tAgentOperClient) EnableProtocolPacketToCPU(ctx context.Context, in *TPacketRule, opts ...grpc.CallOption) (*TErrorStatus, error) {
	out := new(TErrorStatus)
	err := c.cc.Invoke(ctx, "/t_openr.TAgentOper/enableProtocolPacketToCPU", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tAgentOperClient) GetDeviceInfo(ctx context.Context, in *TDeviceInfoReq, opts ...grpc.CallOption) (*TDeviceInfoRsp, error) {
	out := new(TDeviceInfoRsp)
	err := c.cc.Invoke(ctx, "/t_openr.TAgentOper/getDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tAgentOperClient) SyncRoutes(ctx context.Context, opts ...grpc.CallOption) (TAgentOper_SyncRoutesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TAgentOper_serviceDesc.Streams[0], "/t_openr.TAgentOper/syncRoutes", opts...)
	if err != nil {
		return nil, err
	}
	x := &tAgentOperSyncRoutesClient{stream}
	return x, nil
}

type TAgentOper_SyncRoutesClient interface {
	Send(*TRouteMsg) error
	Recv() (*TRouteMsgRsp, error)
	grpc.ClientStream
}

type tAgentOperSyncRoutesClient struct {
	grpc.ClientStream
}

func (x *tAgentOperSyncRoutesClient) Send(m *TRouteMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tAgentOperSyncRoutesClient) Recv() (*TRouteMsgRsp, error) {
	m := new(TRouteMsgRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TAgentOperServer is the server API for TAgentOper service.
type TAgentOperServer interface {
	// this is the first grpc call, used for version check, etc.
	SendInitMsg(context.Context, *TInitMsg) (*TErrorStatus, error)
	// enable or disable to deliver openr packet to cpu
	EnableProtocolPacketToCPU(context.Context, *TPacketRule) (*TErrorStatus, error)
	// get device info
	GetDeviceInfo(context.Context, *TDeviceInfoReq) (*TDeviceInfoRsp, error)
	// sync openr routes to device
	SyncRoutes(TAgentOper_SyncRoutesServer) error
}

func RegisterTAgentOperServer(s *grpc.Server, srv TAgentOperServer) {
	s.RegisterService(&_TAgentOper_serviceDesc, srv)
}

func _TAgentOper_SendInitMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TInitMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TAgentOperServer).SendInitMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/t_openr.TAgentOper/SendInitMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TAgentOperServer).SendInitMsg(ctx, req.(*TInitMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TAgentOper_EnableProtocolPacketToCPU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TPacketRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TAgentOperServer).EnableProtocolPacketToCPU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/t_openr.TAgentOper/EnableProtocolPacketToCPU",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TAgentOperServer).EnableProtocolPacketToCPU(ctx, req.(*TPacketRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _TAgentOper_GetDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TDeviceInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TAgentOperServer).GetDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/t_openr.TAgentOper/GetDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TAgentOperServer).GetDeviceInfo(ctx, req.(*TDeviceInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TAgentOper_SyncRoutes_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TAgentOperServer).SyncRoutes(&tAgentOperSyncRoutesServer{stream})
}

type TAgentOper_SyncRoutesServer interface {
	Send(*TRouteMsgRsp) error
	Recv() (*TRouteMsg, error)
	grpc.ServerStream
}

type tAgentOperSyncRoutesServer struct {
	grpc.ServerStream
}

func (x *tAgentOperSyncRoutesServer) Send(m *TRouteMsgRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tAgentOperSyncRoutesServer) Recv() (*TRouteMsg, error) {
	m := new(TRouteMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TAgentOper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "t_openr.TAgentOper",
	HandlerType: (*TAgentOperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendInitMsg",
			Handler:    _TAgentOper_SendInitMsg_Handler,
		},
		{
			MethodName: "enableProtocolPacketToCPU",
			Handler:    _TAgentOper_EnableProtocolPacketToCPU_Handler,
		},
		{
			MethodName: "getDeviceInfo",
			Handler:    _TAgentOper_GetDeviceInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "syncRoutes",
			Handler:       _TAgentOper_SyncRoutes_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "t_agent.proto",
}

func init() { proto.RegisterFile("t_agent.proto", fileDescriptor_t_agent_45d5e7424f62967b) }

var fileDescriptor_t_agent_45d5e7424f62967b = []byte{
	// 750 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xd1, 0x6e, 0xeb, 0x44,
	0x10, 0xed, 0xa6, 0xb9, 0x2d, 0x9d, 0xc4, 0x4d, 0xee, 0x96, 0xdb, 0x6b, 0x22, 0x84, 0xac, 0xbc,
	0x60, 0x15, 0xa9, 0x40, 0x78, 0xb8, 0x42, 0x48, 0x48, 0x6e, 0xe3, 0xb6, 0x41, 0xa9, 0x1d, 0x6d,
	0x9d, 0x88, 0x37, 0xcb, 0x75, 0x26, 0xad, 0x21, 0xec, 0xba, 0xf6, 0x36, 0x6a, 0x1f, 0x78, 0xe2,
	0x03, 0xf8, 0x13, 0xc4, 0x2f, 0xf1, 0x27, 0xc8, 0x6b, 0xa7, 0xde, 0x86, 0x56, 0x42, 0xba, 0x6f,
	0xde, 0x33, 0xc7, 0xb3, 0x67, 0xe6, 0xcc, 0x0e, 0x18, 0x32, 0x8c, 0x6e, 0x90, 0xcb, 0xe3, 0x34,
	0x13, 0x52, 0xd0, 0x5d, 0x19, 0x8a, 0x14, 0x79, 0xd6, 0x33, 0x64, 0x28, 0x1f, 0x53, 0xcc, 0x4b,
	0xbc, 0xff, 0x0f, 0x81, 0x56, 0x30, 0x89, 0xe2, 0x5f, 0x51, 0xb2, 0xfb, 0x25, 0xd2, 0xaf, 0x61,
	0x17, 0xf9, 0x18, 0x57, 0xb8, 0x34, 0x89, 0x45, 0xec, 0xfd, 0xc1, 0xbb, 0xe3, 0xea, 0xcf, 0xe3,
	0xc0, 0x89, 0x65, 0x22, 0xca, 0x20, 0x5b, 0xb3, 0xe8, 0x21, 0xec, 0x24, 0x0b, 0x2f, 0xfa, 0x0d,
	0xcd, 0x86, 0x45, 0xec, 0x3d, 0x56, 0x9d, 0xe8, 0xb7, 0x00, 0xf3, 0x5c, 0x3a, 0xf3, 0x79, 0x86,
	0x79, 0x6e, 0x6e, 0x5b, 0xc4, 0x6e, 0x0d, 0xde, 0x6a, 0xb9, 0xca, 0x00, 0xd3, 0x48, 0xf4, 0x73,
	0xd8, 0x53, 0xa2, 0x82, 0xc7, 0x14, 0xcd, 0xa6, 0x45, 0x6c, 0x83, 0xd5, 0x00, 0x35, 0x61, 0x77,
	0x9e, 0xcb, 0x89, 0xc8, 0xa4, 0xf9, 0x46, 0xc5, 0xd6, 0x47, 0xfa, 0x05, 0x00, 0xf2, 0xe8, 0x7a,
	0x89, 0x45, 0x05, 0xe6, 0x8e, 0x45, 0xec, 0x4f, 0x98, 0x86, 0xf4, 0x27, 0xb0, 0x1f, 0x0c, 0x71,
	0x95, 0xc4, 0x38, 0xe2, 0x0b, 0xc1, 0xf0, 0x8e, 0xfe, 0x08, 0x06, 0xf2, 0x21, 0xae, 0x8a, 0xb3,
	0xba, 0xad, 0xac, 0xd5, 0xac, 0xf5, 0xd5, 0xfc, 0x22, 0xce, 0x9e, 0xd3, 0xfb, 0x7f, 0x90, 0xe7,
	0x29, 0xf3, 0xf4, 0x63, 0x53, 0x52, 0x0b, 0x60, 0x86, 0x7c, 0x2e, 0xb2, 0xba, 0x97, 0x17, 0x5b,
	0x4c, 0xc3, 0x4e, 0x3a, 0x60, 0x08, 0x8e, 0x75, 0x96, 0xfe, 0xef, 0x00, 0x01, 0x13, 0xf7, 0x12,
	0x27, 0x91, 0xbc, 0xa5, 0x16, 0xb4, 0x96, 0x22, 0x8e, 0x96, 0xa3, 0xd2, 0x0d, 0xa2, 0xdc, 0xd0,
	0x21, 0xfa, 0x3d, 0xec, 0x73, 0x7c, 0x90, 0xb7, 0x22, 0x5d, 0xdb, 0xd2, 0x78, 0xcd, 0x96, 0x0d,
	0x22, 0xa5, 0xd0, 0x8c, 0x45, 0x2e, 0x95, 0x8f, 0x06, 0x53, 0xdf, 0xfd, 0xbf, 0x08, 0xb4, 0x83,
	0x29, 0x4f, 0xe2, 0x5c, 0x2a, 0x15, 0xf4, 0x03, 0x18, 0x69, 0x86, 0x8b, 0xe4, 0x61, 0x9d, 0x9e,
	0xbc, 0x96, 0xfe, 0x39, 0xaf, 0x34, 0xbe, 0x00, 0xc6, 0xc8, 0x95, 0x26, 0x65, 0x7c, 0x05, 0x14,
	0xf6, 0x16, 0x07, 0xcc, 0x90, 0xc7, 0x58, 0x29, 0xd0, 0x10, 0xfa, 0x25, 0x34, 0xd3, 0x48, 0xde,
	0x9a, 0x4d, 0x6b, 0xdb, 0x6e, 0x0d, 0x0e, 0xea, 0xdb, 0x9e, 0x7a, 0xc3, 0x14, 0xa1, 0xff, 0x37,
	0x81, 0xbd, 0x12, 0xbc, 0xcc, 0x6f, 0xa8, 0x0d, 0x9d, 0x84, 0xcf, 0xf1, 0xc1, 0x5f, 0xac, 0x21,
	0xa5, 0xb7, 0xc9, 0x36, 0x61, 0x3a, 0x28, 0xe6, 0xcb, 0x4f, 0x31, 0x53, 0xbe, 0x36, 0x94, 0xaf,
	0xb4, 0xbe, 0xc6, 0xbf, 0xfe, 0x05, 0x63, 0xe9, 0xa7, 0x4c, 0x63, 0x15, 0xd3, 0xba, 0xca, 0x4a,
	0x27, 0xb6, 0x95, 0x13, 0xeb, 0x23, 0xfd, 0x0a, 0xde, 0x64, 0x45, 0xe6, 0x4a, 0xaf, 0xf6, 0xbe,
	0xb4, 0x5e, 0xb2, 0x92, 0xd3, 0xbf, 0x83, 0xf6, 0x93, 0xe2, 0x62, 0xca, 0xfe, 0xbf, 0xe8, 0x0f,
	0xd0, 0xc2, 0x2c, 0x13, 0xd9, 0x95, 0x8c, 0xe4, 0xfd, 0xda, 0x69, 0xed, 0x32, 0xb7, 0x0e, 0x32,
	0x9d, 0x79, 0xf4, 0x33, 0xb4, 0x9d, 0x62, 0x71, 0xcc, 0x30, 0xcb, 0x13, 0xc1, 0xe9, 0x21, 0xd0,
	0x20, 0x74, 0xce, 0x5d, 0x2f, 0x08, 0x67, 0x2e, 0x0b, 0xa7, 0xde, 0xf4, 0xca, 0x1d, 0x76, 0xb7,
	0xe8, 0x3b, 0x78, 0xab, 0xe3, 0x97, 0xce, 0x4f, 0x3e, 0xeb, 0x92, 0xff, 0xc0, 0x23, 0xcf, 0x67,
	0xdd, 0xad, 0x5e, 0xa3, 0x4b, 0x8e, 0x18, 0xb4, 0xf5, 0x1d, 0x52, 0x51, 0x4f, 0x83, 0x91, 0xef,
	0x85, 0xcc, 0xbd, 0x72, 0xd9, 0x4c, 0x25, 0x3e, 0x80, 0xce, 0x13, 0x7c, 0x3e, 0xf6, 0x4f, 0x9c,
	0x71, 0x97, 0x54, 0x2a, 0x4a, 0x70, 0xe4, 0x05, 0x2e, 0x3b, 0x73, 0x4e, 0xdd, 0x6e, 0xe3, 0xe8,
	0x0c, 0x3a, 0x1b, 0x0f, 0x8b, 0xbe, 0x87, 0x83, 0x20, 0x1c, 0xba, 0xb3, 0x70, 0xe4, 0x9d, 0xf9,
	0x7a, 0xe2, 0x1e, 0x1c, 0x6a, 0x81, 0x99, 0xeb, 0x0d, 0x7d, 0x16, 0x7a, 0xce, 0xa5, 0xdb, 0x25,
	0x83, 0x3f, 0x1b, 0x00, 0x81, 0xaa, 0xbb, 0xb0, 0xb0, 0xe8, 0x5e, 0x8e, 0x7c, 0x3e, 0xe2, 0x89,
	0x2c, 0x9a, 0xa9, 0x8d, 0x70, 0x05, 0xf5, 0x5e, 0x6e, 0x25, 0xbd, 0x80, 0xcf, 0xca, 0xcd, 0x33,
	0x29, 0x16, 0x57, 0x2c, 0x96, 0xe5, 0x6e, 0x0d, 0xc4, 0xe9, 0x64, 0x4a, 0x3f, 0xad, 0xff, 0xa9,
	0x57, 0xee, 0x6b, 0x99, 0x1c, 0x30, 0x6e, 0x50, 0xd6, 0xb5, 0xd1, 0xf7, 0x2f, 0xad, 0x12, 0x86,
	0x77, 0xbd, 0x97, 0x03, 0x79, 0x4a, 0x7f, 0x00, 0xc8, 0x1f, 0x79, 0xac, 0x66, 0x22, 0xa7, 0x74,
	0xe3, 0x65, 0x6c, 0x54, 0xa1, 0x8d, 0x99, 0x4d, 0xbe, 0x21, 0xd7, 0x3b, 0x6a, 0xf5, 0x7e, 0xf7,
	0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf3, 0xf3, 0x8f, 0x1c, 0x49, 0x06, 0x00, 0x00,
}
